#lang scheme

(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      ("Insufficient funds")))
(withdraw 10)
(withdraw 20)

(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          ("Insufficient funds")))))

(new-withdraw 10)
(new-withdraw 20)

(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))
(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))
(W1 50)
(W2 70)
(W1 10)

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknow request -- MAKE ACCOUNT" m))))
  dispatch)

(define acc (make-account 100))
((acc 'withdraw) 50)
((acc 'withdraw) 60)
((acc 'deposit) 40)
((acc 'withdraw) 60)

;; exercise 3.1
(define (make-accumulator init)
  (lambda (x)
    (begin (set! init (+ init x))
           init)))
(define A1 (make-accumulator 1))
(A1 2)
(A1 3)
;; ex 3.2
(define (make-monitored proc)
  (let ((calls 0))
    (lambda (param)
    (cond ((eq? 'how-many-calls? param)
           calls)
          ((eq? 'reset-count param)
           (set! calls 0))
          (else (begin (set! calls (+ 1 calls)) (proc param)))))))

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 10)
(s 'how-many-calls?)

;; ex 3.3 & 3.4
(define (make-account-with-passwd balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-the-cops)
    (error 'cops-is-here))
  (define (login passwd)
    (if (eq? password passwd)
        #t
        #f))
 (let ((calls 0))
  (lambda (passwd m)
    (cond ((not (eq? password passwd))
           (begin (set! calls (+ 1 calls))
                  (if (>= calls 7)
                      (call-the-cops)
                  (lambda (x) 'wrong password))))
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknow request -- MAKE ACCOUNT" m))))))
(define acc-with-passwd (make-account-with-passwd 100 'secret-password))
((acc-with-passwd 'secret-password 'withdraw) 40)
((acc-with-passwd 'secret-password 'withdraw) 40)
;;((acc-with-passwd 'some-other-password 'withdraw) 40)
((acc-with-passwd 'secret-password1 'withdraw) 1)
((acc-with-passwd 'secret-password2 'withdraw) 1)
((acc-with-passwd 'secret-password3 'withdraw) 1)
((acc-with-passwd 'secret-password4 'withdraw) 1)
((acc-with-passwd 'secret-password5 'withdraw) 1)
((acc-with-passwd 'secret-password6 'withdraw) 1)
;;((acc-with-passwd 'secret-password7 'withdraw) 1)
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else 
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

;; ex 3.5
(define (square x)
  (* x x))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (unitcircleP x y)
  (define (dist x1 x2 y1 y2)
    (sqrt (+ (square (- x2 x1)) (square (- y2 y1)))))
  (<= (dist x 0 y 0) 1))
(define (estimate-integral P x1 x2 y1 y2 numtrials)
  (let ((rectangle-area (abs (* (- x2 x1) (- y2 y1)))))
    (define (P-test)
      (P (random-in-range x1 x2) (random-in-range y1 y2)))
    (* rectangle-area (monte-carlo numtrials P-test))))
(define pi-est (estimate-integral unitcircleP -1 1 -1 1 10000))
;; ex 3.6

;; ex 3.7
(make-account-with-passwd 100 'open-sesame)
(define (make-joint proc password newpassword)
  (lambda (password-attempt action)
    (if (eq? password-attempt newpassword)
        (proc password action)
        (error "Invalid password"))))
;; ex 3.8
(define (f num)
  (let ((old num)
        (new num))
    (lambda (x)
      (set! old new)
      (set! new x)
      old)))

;; ex 3.2.1

(define (square1 x)
  (* x x))
(define square2 
  (lambda (x)
    (* x x)))
(define (average x y)
  (/ (+ x y) 2))
(define (sqrt1 x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))







